---------------------------------------------------
CHAPTER 9 - INSPECTING & MODIFYING DATA
---------------------------------------------------

- Importing Data on Meat, Poultry, and Egg Producers

    # Create table for government data
    CREATE TABLE meat_poultry_egg_inspect (
        est_number varchar(50) CONSTRAINT est_number_key PRIMARY KEY,
        company varchar(100),
        street varchar(100),
        city varchar(30),
        st varchar(2),
        zip varchar(5),
        phone varchar(14),
        grant_date date,
        activities text,
        dbas text
    );


    # Copy data into table
    COPY meat_poultry_egg_inspect
    FROM '~/Directory/MPI_Directory_by_Establishment_Name.csv'
    WITH (FORMAT CSV, HEADER, DELIMITER ',');


    # Create index to speed up queries
    CREATE INDEX company_idx ON meat_poultry_egg_inspect (company);



- Interviewing the Data Set

    At first glance, we may assume that each company in each row operates at a disctinct
      address.  But, it's never safe to assume in data analysis, so let's check.

    SELECT company,
           street,
           city,
           st, 
           count(*) AS address_count
    FROM meat_poultry_egg_inspect
    GROUP BY company, street, city, st
    HAVING count(*) > 1
    ORDER BY company, street, city, st;


    The query returns 23 rows, which means there are close to two dozen cases where the same
      company is listed multiple times at the same address.

    company                   street                 city          st   address_count
    -----------------------   --------------------   -----------   --   -------------
    Acre Station Meat Farm    17076 Hwy 32 N         Pinetown      NC               2
    Beltex Corporation        3801 North Grove St    Fort Worth    TX               2
    Cloverleaf Cold Storage   111 Imperial Drive     Sanford       NC               2
    --snip--



- Checking for Missing Values

    Let's start checking for missing values by asking a basic question: how many of the meat,
      poultry, and egg processing companies are in each state?

    SELECT st,
           COUNT(*) AS st_count
    FROM meat_poultry_egg_inspect
    GROUP BY st
    ORDER BY st;


    Here, we can see that there are 3 rows without a value for 'st'.

    st    st_count
    --    --------
    AK          17
    AL          93
    AR          87
    AS           1
    --snip--
    WA         139
    WI         184
    WV          23
    WY           1
                 3


    To take a look at these, let's query the rows with a NULL value.

    SELECT est_number, 
           company,
           city,
           st,
           zip
    FROM meat_poultry_egg_inspect
    WHERE st IS NULL;


    est_number          company                           city      st   zip
    -----------------   -------------------------------   -------   --   -------
    V18677A             Atlas Inspection, Inc.            Blaine         55449
    M45319+P45319       Hall-Naime Packing Company, Inc                  36671
    M263A+P263A+V263A   Jones Dairy Farm                                 53538



- Checking for Inconsistent Data Values

    Inconsistent data is another factor that can hamper our analysis.  We can check for 
      inconsistently entered data within a column by using GROUP BY with count().  When we
      scan the unduplicated values in the results, we might be able to spot variations in 
      the spelling of names or other attributes.

    SELECT company,
           count(*) AS company_count
    FROM meat_poultry_egg_inspect
    GROUP BY company
    ORDER BY company ASC;


    At least 4 different spellings are shown for 7 establishments that are likely owned
      by the same company.

    company                        company_count
    --------------------------    -------------
    -snip--
    rmour - Eckrich Meats, LLC                1
    rmour-Eckrich Meats LLC                   3
    rmour-Eckrich Meats, Inc.                 1
    rmour-Eckrich Meats, LLC                  2
    -snip--



- Checking for Malformed Values Using length()

    It's a good idea to check for unexpected values in a column that should be consistently
      formatted.  For example, each entry in the 'zip' column in the 'meat_poultry_egg_inspect'
      table should be formatted in the style of a US zip with 5 digits.

    SELECT length(zip),
           count(*) AS length_count
    FROM meat_poultry_egg_inspect
    GROUP BY length(zip)
    ORDER BY length(zip) ASC;


    As we can see, there are many zip codes that are not formatted in the standard way.

    length    length_count
    ------    ------------
         3              86
         4             496
         5            5705


    Now we can take a look at the states that contain zips without standard formatting.

    SELECT st, 
           count(*) AS st_count
    FROM meat_poultry_egg_inspect
    WHERE length(zip) < 5
    GROUP BY st
    ORDER BY st ASC;


    The states missing 5-digit zip codes are largely in the Northeast region of the US where
      zip codes often start with a zero.  This is likely due to the file conversion.

    st    st_count
    --    --------
    CT          55
    MA         101
    ME          24
    NH          18
    NJ         244
    PR          84
    RI          27
    VI           2
    VT          27



- Modifying Tables with ALTER TABLE

    # Add a column
    ALTER TABLE table ADD COLUMN column data_type;

    # Remove a column
    ALTER TABLE table DROP COLUMN column;

    # Change a column's data type
    ALTER TABLE table ALTER COLUMN column SET DATA TYPE data_type;

    # Add a NOT NULL constraint
    ALTER TABLE table ALTER COLUMN column SET NOT NULL;

    # Remove a NOT NULL constraint
    ALTER TABLE table ALTER COLUMN column DROP NOT NULL;



- Modifying Values with Update

    # Update a single column
    UPDATE table
    SET column = value;


    # Update multiple columns
    UPDATE table
    SET column_a = value,
        column_b = value;


    # Filter the rows to update
    UPDATE table
    SET column = value
    WHERE criteria;


    # Update one table with values from another table (ANSI SQL)
    UPDATE table
    SET column = (SELECT column
                  FROM table_b
                  WHERE table.column = table_b.column)
    WHERE EXISTS (SELECT column
                  FROM table_b
                  WHERE table.column = table_b.column);


    # Update one table with values from another table (simpler Postgres syntax)
    UPDATE table
    SET column = table_b.column
    FROM table_b
    WHERE table.column = table_b.column;



- Creating Backup Tables

    Before modifying a table, it's a good idea to make a copy for reference and backup in case
      you accidentally destroy some data.


    # Create backup table
    CREATE TABLE meat_poultry_egg_inspect_backup AS
    SELECT * FROM meat_poultry_egg_inspect;


    # Confirm that the original and backup tables have the same number of rows
    SELECT
        (SELECT count(*) FROM meat_poultry_egg_inspect) AS original,
        (SELECT count(*) FROM meat_poultry_egg_inspect_backup) AS backup;



- Restoring Missing Column Values

    # Create a column copy for backup
    ALTER TABLE meat_poultry_egg_inspect ADD COLUMN st_copy varchar(2);


    # Copy existing column to backup
    UPDATE mear_poultry_egg_inspect
    SET st_copy = st;


    # Confirm that the backup succeeded
    SELECT st, st_copy
    FROM meat_poultry_egg_inspect
    ORDER BY st;


    # Update rows where state was missing
    UPDATE meat_poultry_egg_inspect
    SET st = 'MN'
    WHERE est_number = 'V18677A';

    UPDATE meat_poultry_egg_inspect
    SET st = 'AL'
    WHERE est_number = 'M45319+P45319';

    UPDATE meat_poultry_egg_inspect
    SET st = 'WI'
    WHERE est_number = 'M263A+P263A+V263A';



- Restoring Backup Values

    # Restore from the backup column
    UPDATE meat_poultry_egg_inspect
    SET st = st_copy;


    # Restore from the backup table
    UPDATE meat_poultry_egg_inspect original
    SET st = backup.st
    FROM meat_poultry_egg_inspect_backup backup
    WHERE original.est_number = backup.est_number;



- Updating Values for Consistency

    # Create a new column to hold standard company name
    ALTER TABLE meat_poultry_egg_inspect ADD COLUMN company_standard varchar(100);

    # Populate new column
    UPDATE meat_poultry_egg_inspect
    SET company_standard = company;


    # Create company standard name for company
    UPDATE meat_poultry_egg_inspect
    SET company_standard = 'Armour-Eckrick Meats'
    WHERE company LIKE 'Armour%';



- Repairing Zip Codes Using Concatenation

    # Make a backup copy of zip code column
    ALTER TABLE meat_poultry_egg_inspect ADD COLUMN zip_copy varchar(5);

    # Copy zip codes to backup column
    UPDATE meat_poultry_egg_inspect
    SET zip_copy = zip;


    # Fix the length 3 zip codes
    UPDATE meat_poultry_egg_inspect
    SET zip = '00' || zip
    WHERE st IN ('PR', 'VI') AND length(zip) = 3;


    # Fix the length 4 zip codes
    UPDATE meat_poultry_egg_inspect
    SET zip = '0' || zip
    WHERE st IN ('CT', 'MA', 'ME', 'NH', 'NJ', 'RI', 'VT') AND length(zip) = 4;



- Updating Values Across Tables

    Let's say we want to set an inspection date for each of the companies in our table.  We
      want to do this by US regions, such as 'Northeast', 'Pacific', and so on.  We have the
      region data stored in a csv file, and we want to add them to our database.


    # Create a table for the state regions
    CREATE TABLE state_regions (
        st varchar(2) CONSTRAINT st_key PRIMARY KEY,
        region varchar(20) NOT NULL
    );


    # Load the new table from the csv
    COPY state_regions
    FROM '~/Directory/state_regions.csv'
    WITH (FORMAT CSV, HEADER, DELIMITER ',');


    # Add new column for the inspection date
    ALTER TABLE meat_poultry_egg_inspect inspect


    # Set inspection dates for 'New England' region
    SET inspection_date = '2019-12-01'
    WHERE EXISTS (SELECT state_regions.region
                  FROM state_regions
                  WHERE inspect.st = state_regions.st
                  AND state_regions.region = 'New England');



- Deleting Data

    # Delete all rows in a table
    DELETE FROM table_name;


    # Delete filtered rows
    DELETE FROM table_name WHERE expression;


    # Remove a column from a table
    ALTER TABLE table_name DROP COLUMN column_name;


    # Remove a table from a database
    DROP TABLE table_name;



- Using Transaction Blocks

    # Transaction Commands
    START TRANSACTION  or  BEGIN     # Starts transaction block
    COMMIT                           # Ends block and saves changes
    ROLLBACK                         # Ends block and reverts all changes


    # Rollback example
    START TRANSACTION;

    UPDATE mean_poultry_egg_inspect
    SET company = 'AGRO Merchantss Oakland LLC'
    WHERE company = 'AGRO Merchants Oakland LLC';

    ROLLBACK;



- Improving Performance When Updating Large Tables

    Because of how Postgres works internally, adding a column to a table and filling it with
      values can quickly inflate a table's size.  The reason is that the database creates a
      new version of the existing row each time a value is updated, but it doesn't immediately
      delete the old row version.

    Instead of adding a column and filling it with values, we can save disk space by copying
      the entire table and adding a populated column during the operation.  Then, we rename
      the tables so the copy replaces the original, and the original becomes a backup.


    # Create the backup table
    CREATE TABLE meat_poultry_egg_inspect_backup AS
    SELECT *,
           '2018-02-07'::date AS reviewed_date
    FROM meat_poultry_egg_inspect;


    # Swap the table names
    ALTER TABLE meat_poultry_egg_inspect RENAME TO meat_poultry_egg_inspect_temp;
    ALTER TABLE meat_poultry_egg_inspect_backup RENAME TO meat_poultry_egg_inspect;
    ALTER TABLE meat_poultry_egg_inspect_temp RENAME TO meat_poultry_egg_inspect_backup;